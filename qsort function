//qsort函数
#include<stdio.h>
#include<string.h>
struct Stu
{
	char name[20];
	int age;
}s;
int cmp_int(const void* e1, const void* e2)
{
	return *(int*)e1 - *(int*)e2;
}
int cmp_float(const void* e1, const void* e2)
{
	if (*(float*)e1 == *(float*)e2)
		return 0;
	else if (*(float*)e1 > *(float*)e2)
		return 1;
	else
		return -1;
}
int cmp_struct_name(const void* e1, const void* e2)
{
	return strcmp((*(struct Stu*)e1).name, (*(struct Stu*)e2).name);
}
int cmp_struct_age(const void* e1, const void* e2)
{
	return (*(struct Stu*)e1).age - (*(struct Stu*)e2).age;
}
void print_int(int arr[], int sz)
{
		int i = 0;
		for (i = 0; i < sz; i++)
		{
			printf("%d ",arr[i]);
		}
		printf("\n");
}
void print_float(float arr[], int sz)
{
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%4.1f ", arr[i]);
	}
	printf("\n");
}
void print_struct(struct Stu arr[], int sz)
{
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%s,%d\n",arr[i].name,arr[i].age);
	}
}
void test_int()
{
	int arr[] = { 2,1,5,6,9,8,7,0,3,4 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	printf("排序前:");
	print_int(arr, sz);
	printf("排序后:");
	qsort(arr, sz, sizeof(arr[0]), cmp_int);
	print_int(arr, sz);
	printf("\n");
}
void test_float()
{
	float f[] = { 1.2,10.8,8.8,6.5,9.8,7.4 };
	int sz = sizeof(f) / sizeof(f[0]);
	printf("排序前:");
	print_float(f, sz);
	printf("排序后:");
	qsort(f, sz, sizeof(f[0]), cmp_float);
	print_float(f, sz);
	printf("\n");
}
void test_struct_name()
{
	struct Stu s[] = { {"zhangsan",19},{"lisi",20},{"wangwu",18} };
	int sz = sizeof(s) / sizeof(s[0]);
	printf("排序前:\n");
	print_struct(s, sz);
	qsort(s, sz, sizeof(s[0]), cmp_struct_name);
	printf("排序后:\n");
	print_struct(s, sz);
	printf("\n");
}
void test_struct_age()
{
	struct Stu s[] = { {"zhangsan",19},{"lisi",20},{"wangwu",18} };
	int sz = sizeof(s) / sizeof(s[0]);
	printf("排序前:\n");
	print_struct(s, sz);
	qsort(s, sz, sizeof(s[0]), cmp_struct_age);
	printf("排序后:\n");
	print_struct(s, sz);
	printf("\n");
}
int main()
{
	test_int();//整型数组排序
	test_float();//浮点型数组排序
	test_struct_name();//结构体数组按姓名排序
	test_struct_age();//结构体数组按年龄排序
	return 0;
}
