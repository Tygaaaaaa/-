#include<stdio.h>
#include<math.h>
#include<assert.h>
#define subscript 32 //定义二进制数组元素个数
#define prime_num 100//定义要寻找的质数个数
void sort(int arr[],int sz)
{
	int i = 0;
	for (i = 0; i < sz-1; i++)
	{ //将异或得到的结果进行排序
		int j = 0;
		for (j = 0; j < sz - 1 - i; j++)
		{
			if (arr[j] > arr[j + 1])
			{
				int tmp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tmp;
			}
		}
	}
	printf("整理得到:\n");
	int k = 0;
	for (k = 0; k < sz; k++)
	{   //打印排序后的结果
		printf("%d ", arr[k]);
		if ((k+1) % 20 == 0)
			printf("\n");//每二十个换一行
	}
}
void print_XOR(int arr[])
{   //将数组里的质数两两按位异或
	int i = 0;
	int count = 0;
	int arr1[(prime_num - 1) * (prime_num) / 2] = { 0 };
	for (i = 0; i < prime_num-1; i++)
	{
		int j = 0;
		for (j = i + 1; j < prime_num; j++)
		{
			printf("%5d ^%5d = %-5d", arr[i], arr[j],arr[i]^arr[j]);
			arr1[count] = arr[i] ^ arr[j];
			count++;
			if (count % 4 == 0)
				printf("\n");//每四个式子换一行
		}
	}
	printf("\n");
	sort(arr1, (prime_num ) * (prime_num - 1) / 2);
}
void print_bin(int num)
{    //打印二进制
	short arr[subscript] = { 0 };
	short a = 31;
	int i = 0;
	while (num)
	{
		assert(a >= 0);
		arr[a] = num % 2;
		num /= 2;
		a--;
	}
	for (i = 0; i < subscript; i++)
	{
		printf("%d", arr[i]);
		if ((i + 1) % 8 == 0)
			printf(" ");//模拟字节
	}
}
void find_prime(int num)
{
	int i = 0;
	int k = 0;
	int arr[prime_num] = { 0 };
	for (i = 2; i <=num; i++)
	{
		int j = 0;
		for (j = 2; j <(int)sqrt(num); j++)
		{
			if (i % j == 0 && i!=j)
			{
				break;//找质数
			}
			
		}
		if (j >=(int)sqrt(num))
		{
			printf("%d\t", i);
			if (k < prime_num && i!=2)
			{
				arr[k] = i;
				k++;//把找到的质数打包成一个数组
			}
			print_bin(i);
			printf("\n");
		}
	}
	print_XOR(arr);
}
void find_even(int num)
{
	int i = 0;
	for (i = 2; i <= num; i++)
	{
		if (i % 2 == 0)
		{
			printf("%d\t", i);
			print_bin(i);
			printf("\n");
		}
	}
}
int main()
{
	int num = 0;
	printf("想要打印几以内的质数:>");
	scanf("%d", &num);
	find_prime(num);//寻找质数
	//find_even(num);//寻找偶数

	return 0;
}

