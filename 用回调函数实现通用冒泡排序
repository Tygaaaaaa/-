//用回调函数模拟实现万能冒泡排序
#include<stdio.h> 
#include<string.h>
struct Stu
{
	char name[20];
	int age;
};
int cmp_int(const void* e1, const void* e2)
{
	return *(int*)e1 - *(int*)e2;
}
int cmp_float(const void* e1, const void* e2)
{
	if ((*(float*)e1 - *(float*)e2) == 0)
		return 0;
	else if ((*(float*)e1 - *(float*)e2) > 0)
		return 1;
	else
		return -1;
}
int cmp_struct_name(const void* e1, const void* e2)
{
	return strcmp(((struct Stu*)e1)->name, ((struct Stu*)e2)->name);
}
int cmp_struct_age(const void* e1, const void* e2)
{
	return ((struct Stu*)e1)->age-((struct Stu*)e2)->age;
}
void print_int(int arr[],int sz)
{
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
	printf("\n");
}
void print_float(float arr[], int sz)
{
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%4.1f ", arr[i]);
	}
	printf("\n");
}
void print_struct(struct Stu arr[], int sz)
{
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%s,%d\n",arr[i].name,arr[i].age);
	}
}
void swap(char* buf1, char* buf2, int width)
{    //交换方式
	int i = 0;
	for (i = 0; i < width; i++)
	{//不管什么类型的数据 一个字符一个字符的交换
		char tmp = *buf1;
		*buf1 = *buf2;
		*buf2 = tmp;
		buf1++;
		buf2++;
	}
}
void bubble_sort(void* base, int sz, int width, int (*cmp)(const void* e1, const void* e2))
{                                                 //比较方式
	int i, j;
	//趟数
	for (i = 0; i < sz - 1; i++)
	{
		//每趟交换次数
		for (j = 0; j < sz - 1 - i; j++)
		{
			//两个元素比较
			if (cmp((char*)base+j*width, (char*)base+(j+1)*width)>0)
			{
				//交换
				swap((char*)base+j*width,(char*)base+(j+1)*width,width);
				//    要 交 换 的 两 个 元 素                    元素大小
			}
		}
	}
}
void test1()
{
	int arr[] = { 2,9,8,4,5,7,6,0 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	printf("排序前:");
	print_int(arr, sz);
	bubble_sort(arr, sz, sizeof(arr[0]), cmp_int);
	printf("排序后:");
	print_int(arr, sz);
	printf("\n");
}
void test2()
{
	float arr[] = { 45.1,25.2,65.4,1.2,9.8,65.2 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	printf("排序前:");
	print_float(arr, sz);
	bubble_sort(arr, sz, sizeof(arr[0]), cmp_float);
	printf("排序后:");
	print_float(arr, sz);
	printf("\n");
}
void test3()
{
	struct Stu s[] = { {"zhangsan",18},{"lisi",20},{"wangwu",19} };
	int sz = sizeof(s) / sizeof(s[0]);
	printf("排序前:\n");
	print_struct(s, sz);
	bubble_sort(s, sz, sizeof(s[0]), cmp_struct_name);
	printf("排序后:\n");
	print_struct(s, sz);
	printf("\n");
}
void test4()
{
	struct Stu s[] = { {"zhangsan",18},{"lisi",20},{"wangwu",19} };
	int sz = sizeof(s) / sizeof(s[0]);
	printf("排序前:\n");
	print_struct(s, sz);
	bubble_sort(s, sz, sizeof(s[0]), cmp_struct_age);
	printf("排序后:\n");
	print_struct(s, sz);
	printf("\n");
}
int main()
{
	test1();//整型
	test2();//浮点型
	test3();//结构体 姓名
	test4();//结构体 年龄
	return 0;
}
