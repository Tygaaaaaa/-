//模拟memcpy算法
#include<stdio.h>
#include<assert.h>
#include<string.h>
struct Stu
{
	char name[20];
	int age;
};
void* my_memcpy(void* dest, const void* src, size_t num)
{
	assert(dest && src);
	void* ret = dest;
	while (num--)
	{
		*(char*)dest = *(char*)src;
		++(char*)dest;
		++(char*)src;
	}
	return ret;
}
int main()
{
	char arr1[] = { 0,1,2,3,4 };
	char arr2[5] = { 0 };
	struct Stu stu1[] = {{"zhangsan",20},{"lisi",19},{"wangwu",18}};
	struct Stu stu2[3] = { 0 };
	my_memcpy(arr2, arr1, sizeof(arr1));
	my_memcpy(stu2, stu1, sizeof(stu1));
	return 0;
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//模拟memmove算法
#include<stdio.h>
#include<assert.h>
#include<string.h>
void* my_memmove(void* dest, const void* src, size_t count)
{
	assert(dest && src);
	void* ret = dest;
	if (dest < src)//比较地址的大小不需要考虑类型
	{
		//前->后
		while (count--)
		{
			*(char*)dest = *(char*)src;
			++(char*)dest;
			++(char*)src;
		}
	}
	else
	{
		//后->前
		while (count--)//这里count--让count变成19了
		{
			*((char*)dest + count) = *((char*)src + count);//正好跳到最后一个字节
		}
	}
}
int main()
{
	int arr1[] = { 0,1,2,3,4,5,6,7,8,9};
	int arr2[] = { 0,1,2,3,4,5,6,7,8,9 };
	my_memmove(arr1,arr1+2,sizeof(arr1[0])*5);
	my_memmove(arr2 + 2, arr2, sizeof(arr2[0])*5);
	return 0;
}
