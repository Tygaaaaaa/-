//模拟实现strlen,strcpy,strcat,strcmp,strncpy,strncat,strncmp 
#include<stdio.h>
#include<string.h>
#include<assert.h>
int my_strncmp(const char* p1, const char* p2,size_t count)
{
	assert(p1 && p2);
	while (count-- && (*p1 == *p2))
	{
		p1++;
		p2++;
	}
	return *p1 - *p2;

}
char* my_strncat(char* dest, const char* src, size_t count)
{
	assert(dest && src);
	char* ret = dest;
	while (*dest++)
	{
		;
	}
	dest--;
	while (count--)
	{
		if (!(*dest++ = *src++))//追加到\0则返回ret，追加到字符则循环继续
			return ret;
	}
	*dest = '\0';//src没有被整个追加要补'\0'
	return ret;
}
char* my_strncpy(char* dest, const char* src, size_t count)
{
	assert(dest && src);
	char* ret = dest;
	while (count && (*dest++ = *src++))
	{
		count--;
	}
	if (count)
	{
		while (--count)//追加到num个'\0'
		{
			*dest++ = '\0';
		}
	}
	return ret;
}
int my_strcmp(const char* p1, const char* p2)
{
	assert(p1 && p2);
	while (*p1 ==*p2)
	{
		if (*p1 == 0)
			return 0;
		p1++;
		p2++;
	}
	return *p1 - *p2;
}
int my_strlen(char* str)
{
	assert(str);
	int count = 0;
	while (*str++)
	{
		count++;
	}
	return count;
}
char* my_strcpy(char* dest, const char* src)
{
	assert(dest && src);
	char* ret = dest; //保存字符串首元素的地址
	while (*dest++ = *src++)//*dest的结果就是表达式的结果
	{
		;
	}
	return ret;
}
char* my_strcat(char* dest, const char* src)
{
	assert(dest && src);
	char* ret = dest;
	while (*dest!='\0')//不能写成*dest++这样就跳过了\0
	{
		dest++;//找到'\0'
	}
	while (*dest++ = *src++)
	{
		;//追加字符串
	}
	return ret;
}
int main()
{
	char arr1[30] ="abcdef";
	char arr2[] = "ghi";
	char arr3[30] = "abcdef";
	char* p1 = "abcdef";
	char* p2 = "abcdg";
	char a1[30] = "abcdef";
	char a2[] = "acd";
	char b1[30] = "hello";
	char b2[] = " world";
	printf("arr1的字符串长度是%d\n", my_strlen(arr1));
	printf("arr1==%s\n", my_strcpy(arr1, arr2));
	printf("arr3==%s\n", my_strcat(arr3,arr2));
	printf("p1-p2=%d\n", my_strcmp(p1, p2));
	printf("a1=%s\n", my_strncpy(a1, a2,2));
	printf("b1=%s\n", my_strncat(b1,b2,6));
	printf("p1-p1=%d\n", my_strncmp(p1, p2, 5));
	return 0;
}

